# Comments generated by ChatGPT 😁
# @param {String} s
# @return {Integer}
def length_of_longest_substring(s)
  # Initialize variables to store the length of the longest substring
  # and the current substring, as well as a hash to store character indices
  # and variables to store the starting index of the current substring
  # and the current index in the string
  longest = 0
  count = 0
  tmp_hash = {}
  current_start = 0
  index = 0

  # Iterate over each character in the string
  s.each_char do |char|
    # Check if the character has been seen before
    if tmp_hash[char] && tmp_hash[char] >= current_start
      # If the character has been seen before and the index of the
      # previous occurrence is greater than or equal to the starting
      # index of the current substring, update the starting index
      # of the current substring to be the index of the previous
      # occurrence plus one
      current_start = tmp_hash[char] + 1
      # Update the length of the current substring to be the
      # current index minus the starting index of the current
      # substring plus one
      count = index - current_start + 1
    else
      # If the character has not been seen before or the index
      # of the previous occurrence is less than the starting
      # index of the current substring, increment the length
      # of the current substring by one
      count += 1
      # If the length of the current substring is greater than
      # the length of the longest substring seen so far, update
      # the value of longest to be the length of the current substring
      longest = count if count > longest
    end
    # Store the index of the current character in the tmp_hash hash
    tmp_hash[char] = index
    # Increment the index variable
    index += 1
  end

  # Return the length of the longest substring
  longest
end
